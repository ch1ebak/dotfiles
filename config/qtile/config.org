#+TITLE: ch1ebak's Qtile Config
#+AUTHOR: ch1ebak
#+PROPERTY: header-args :tangle config.py
#+auto_tangle: t

* TABLE OF CONTENTS :toc:
- [[#header][HEADER]]
- [[#imports][IMPORTS]]
- [[#theme][THEME]]
- [[#keybindings][KEYBINDINGS]]
  - [[#global][Global]]
  - [[#apps-and-window-manipulation][Apps and window manipulation]]
- [[#groups][GROUPS]]
  - [[#switching-to-group][Switching to group]]
- [[#layouts][LAYOUTS]]
  - [[#global-1][Global]]
  - [[#my-layouts][My layouts]]
- [[#widgets][WIDGETS]]
- [[#screens][SCREENS]]
- [[#some-shit-idk-wh---settings][SOME SHIT IDK WH-- SETTINGS]]
- [[#autostart][AUTOSTART]]
- [[#a-wee-joke-from-the-devs][A WEE JOKE FROM THE DEVS]]

* HEADER
#+begin_src python
#    ____  ______ ____ __     ______   ______ ____   _   __ ______ ____ ______ #
#   / __ \/_  __//  _// /    / ____/  / ____// __ \ / | / // ____//  _// ____/ #
#  / / / / / /   / / / /    / __/    / /    / / / //  |/ // /_    / / / / __   #
# / /_/ / / /  _/ / / /___ / /___   / /___ / /_/ // /|  // __/  _/ / / /_/ /   #
# \___\_\/_/  /___//_____//_____/   \____/ \____//_/ |_//_/    /___/ \____/    #
#+end_src

* IMPORTS
#+begin_src python
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook, extension
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List
from libqtile.widget import spacer
#+end_src

* THEME
Replace "spacegray" with catppuccin/dracula/grayscale/gruvbox/nord
#+begin_src python
from colors.spacegray import colors
#+end_src

* KEYBINDINGS
** Global
#+begin_src python
mod = "mod4"
terminal = guess_terminal("alacritty")
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+end_src

** Apps and window manipulation
#+begin_src python
keys = [
     # Apps
    Key([mod], "Return", lazy.spawn("alacritty")),
    Key([mod, "shift"], "Return", lazy.spawn("alacritty -e bash")),

    Key([mod], "w", lazy.spawn("firefox")),
    Key([mod, "shift"], "w", lazy.spawn("/usr/bin/firefox --private-window")),

    Key([mod], "e", lazy.spawn("emacsclient -c -a 'emacs'")),

    Key([mod], "a", lazy.spawn("emacsclient -c -a 'emacs' --eval '(dired nil)'")),
    Key([mod, "shift"], "a", lazy.spawn("pcmanfm")),

    Key([mod], "s", lazy.spawn("rofi -m 1 -show drun")),

    Key([mod], "d", lazy.spawn("spotify")),

    Key([mod], "g", lazy.spawn("steam")),
    Key([mod, "shift"], "g", lazy.spawn("lutris")),

    # Power menu
    Key([mod], "p", lazy.spawn("slock")),
    Key([mod, "shift"], "p", lazy.spawn("rofi -m 1 -show power-menu -modi power-menu:~/.config/rofi/modules/rofi-power-menu")),

    # App control
    Key([mod], "q", lazy.window.kill()),
    Key([mod, "shift"], "q", lazy.spawn("xkill")),
    Key([mod, "control"], "r", lazy.restart()),
    Key([mod, "control"], "q", lazy.shutdown()),

    # Switch between screens (3 monitors)
    # Key([mod], "z", lazy.to_screen(2)),
    # Key([mod], "c", lazy.to_screen(1)),
    # Key([mod], "x", lazy.to_screen(0)),

    # Switch between screens (2 monitors)
    Key([mod], "z", lazy.to_screen(1)),
    Key([mod], "x", lazy.to_screen(0)),

    # Switch between windows
    Key([mod], "h", lazy.layout.down()),
    Key([mod], "l", lazy.layout.next()),

    # Switch between groups
    Key([mod], 'j', lazy.screen.prev_group(skip_managed=True, )),
    Key([mod], 'k', lazy.screen.next_group(skip_managed=True, )),

    # Move windows
    Key([mod, "shift"], "h", lazy.layout.shuffle_left()),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right()),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down()),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up()),

    # Grow windows.
    Key([mod, "control"], "n", lazy.layout.normalize()),
    Key([mod, "control"], "h", lazy.layout.grow_left()),
    Key([mod, "control"], "l", lazy.layout.grow_right()),
    Key([mod, "control"], "j", lazy.layout.shrink()),
    Key([mod, "control"], "k", lazy.layout.grow()),

    # Layouts
    Key(["shift", "control"], "Return", lazy.layout.toggle_split()),
    Key([mod, "shift"], "Tab", lazy.layout.flip()),
    Key([mod], "Tab", lazy.next_layout()),
    Key([mod], "Space", lazy.window.toggle_fullscreen())
]
#+end_src

* GROUPS
#+begin_src python
groups = [
       Group("1", label="", layout='monadtall', matches=[Match(wm_class=["ferdium"])]),
       Group("2", label="", layout='monadtall', matches=[Match(wm_class=["tor"])]),
       Group("3", label="", layout='monadtall', matches=[Match(wm_class=["emacs"])]),
       Group("4", label="", layout='monadtall', matches=[Match(wm_class=["alacritty", "Alacritty"])]),
       Group("5", label="", layout='monadtall', matches=[Match(wm_class=["pcmanfm"])]),
       Group("6", label="", layout='monadtall', matches=[Match(wm_class=["calibre", "nitrogen", "qbittorrent", "virt-manager", "kcc", "lxappearance-gtk3"])]),
       Group("7", label="", layout='max', matches=[Match(wm_class=["Steam", "steam", "lutris"])]),
       Group("8", label="", layout='max', matches=[Match(wm_class=["spotify"])]),
       Group("9", label="", layout='max', matches=[Match(wm_class=["mpv"])])
       ]
#+end_src

** Switching to group
#+begin_src python
for i in groups:
    keys.extend(
        [
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
        ]
    )
#+end_src

* LAYOUTS
** Global
#+begin_src python
layout_theme = {"border_width": 2,
                "margin": 6,
                "border_focus": colors[14],
                "border_normal": colors[2]
                }
#+end_src

** My layouts
#+begin_src python
layouts = [
    layout.Max(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.MonadTall(**layout_theme),
]
#+end_src

* WIDGETS
#+begin_src python
widget_defaults = dict(
    font='JetBrainsMono Nerd Font Bold Italic',
    fontsize=10,
    padding=5,
    foreground = colors[15],
    background = colors[0]
    )
#+end_src

* SCREENS
#+begin_src python
screens = [
 Screen(
         top=bar.Bar(
             [
             widget.Sep(
                     linewidth = 0,
                     padding = 5,
                     ),
             widget.CurrentLayoutIcon(
                     custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                     padding = 5,
                     scale = 0.7
                     ),
             widget.TextBox(
                     text = "[",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[10],
                     ),
             widget.OpenWeather(
                     app_key = "1fcfd7f17c1c297646e7efb5bcfb2c8a",
                     cityid = "3088848",
                     format = '{icon} {main_temp}°',
                     metric = True
                     ),
             widget.TextBox(
                     text = "]",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[4],
                     ),
             widget.TextBox(
                     text = "[",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[10],
                     ),
             widget.Clock(
                     format = "  %a, %d.%m.%y",
                     foreground = colors[6],
                     ),
             widget.TextBox(
                     text = "]",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[4],
                     ),
             widget.TextBox(
                     text = "[",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[10],
                     ),
             widget.Clock(
                     format = "  %H:%M",
                     foreground = colors[6],
                     ),
             widget.TextBox(
                     text = "]",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[4],
                     ),
             widget.Spacer(
                     length = bar.STRETCH
                     ),
             widget.GroupBox(
                     disable_drag = True,
                     center_aligned = True,
                     font='Font Awesome',
                     fontsize = 12,
                     margin_y = 3,
                     margin_x = 0,
                     padding_y = 5,
                     padding_x = 3,
                     borderwidth = 3,
                     highlight_method = "line",
                     rounded = True,
                     inactive = colors[2],
                     active = colors[15],
                     highlight_color = colors[9],
                     this_current_screen_border = colors[15],
                     this_screen_border = colors[15],
                     other_current_screen_border = colors[7],
                     other_screen_border = colors[7],
                     foreground = colors[15],
                     background = colors[0]
                     ),
             widget.Spacer(
                     length = bar.STRETCH
                     ),
             widget.TextBox(
                     text = "[",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[10],
                     ),
             widget.CPU(
                     padding = 5,
                     mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(terminal + ' -e bpytop')},
                     format = '  {load_percent}%',
                     ),
             widget.TextBox(
                     text = "]",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[4],
                     ),
             widget.TextBox(
                     text = "[",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[10],
                     ),
             widget.Memory(
                     format = '  {MemUsed: .0f}{mm}',
                     mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(terminal + ' -e bpytop')},
                     ),
             widget.TextBox(
                     text = "]",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[4],
                     ),
             widget.TextBox(
                     text = "[",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[10],
                     ),
             widget.Systray(
                     icon_size = 18
                         ),
             widget.TextBox(
                     text = "]",
                     fontsize = 15,
                     font='JetBrainsMono Nerd Font Bold',
                     foreground = colors[4],
                     ),
             widget.Sep(
                     linewidth = 0,
                     padding = 5,
                     ),
             ],
             25,
             margin = [6, 6, 0, 6]
             ), ),
 Screen(
         top=bar.Bar(
             [
             widget.Sep(
                     linewidth = 0,
                     padding = 5,
                     ),
             widget.CurrentLayoutIcon(
                     custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                     padding = 5,
                     scale = 0.7
                     ),
             widget.Spacer(
                     length = bar.STRETCH
                     ),
             widget.GroupBox(
                     disable_drag = True,
                     center_aligned = True,
                     font='Font Awesome',
                     fontsize = 12,
                     margin_y = 3,
                     margin_x = 0,
                     padding_y = 5,
                     padding_x = 3,
                     borderwidth = 3,
                     highlight_method = "line",
                     rounded = True,
                     inactive = colors[2],
                     active = colors[15],
                     highlight_color = colors[9],
                     this_current_screen_border = colors[15],
                     this_screen_border = colors[15],
                     other_current_screen_border = colors[7],
                     other_screen_border = colors[7],
                     foreground = colors[15],
                     background = colors[0]
                     ),
             widget.Spacer(
                     length = bar.STRETCH
                     ),
             widget.Sep(
                     linewidth = 0,
                     padding = 5,
                     ),
             ],
             25,
             margin = [6, 6, 0, 6]
             ), ),
]
#+end_src

* SOME SHIT IDK WH-- SETTINGS
#+begin_src python
dgroups_key_binder = None
dgroups_app_rules = []  # type: List
follow_mouse_focus = False
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    *layout.Floating.default_float_rules,
    Match(wm_class='notification'),
    Match(wm_class='copyq')],
    border_width = 2,
    border_focus = colors[14],
    border_normal = colors[2]
    )
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True
#+end_src

* AUTOSTART
#+begin_src python
@hook.subscribe.startup_once
def autostart():
    qtile.cmd_spawn("xrandr --output eDP-1 --off --output DP-1 --mode 1280x1024 --pos 0x0 --rotate left --output HDMI-1 --off --output HDMI-1-0 --primary --mode 1920x1080 --pos 1024x0 --rotate normal --output DP-1-0 --off --output DP-1-1 --off")
    qtile.cmd_spawn("picom -b")
    qtile.cmd_spawn("keepassxc &")
    qtile.cmd_spawn("dunst &")
    qtile.cmd_spawn("nm-applet &")
    qtile.cmd_spawn("nitrogen --restore &")
    qtile.cmd_spawn("/usr/bin/emacs --daemon &")
    for p in processes:
        subprocess.Popen(p)
#+end_src

* A WEE JOKE FROM THE DEVS
#+begin_src python
# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src
