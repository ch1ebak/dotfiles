#+TITLE: ch1ebak's cool emacs config 2: electric boogaloo
#+AUTHOR: ch1ebak

* STARTUP PERFORMANCE
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

* [[https://github.com/progfolio/elpaca][ELPACA]]
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+end_src

* SETTINGS
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (delete-selection-mode 1)
  (electric-indent-mode -1)
  (electric-pair-mode 1)
  (global-auto-revert-mode t)
  (global-visual-line-mode t)
  (set-fringe-mode 5)
  (blink-cursor-mode 0)
  (winner-mode 1)
  :config
  (setq org-edit-src-content-indentation 0)
  (setq vc-follow-symlinks nil)
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq pop-up-windows nil)
  (setq inhibit-startup-screen nil)
  (setq shell-file-name "/usr/bin/bash")
  (setq-default indent-tabs-mode nil)
  (setq use-short-answers t)
  (add-hook 'org-mode-hook (lambda ()
          (setq-local electric-pair-inhibit-predicate
                  `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode)
  (setq conf-unix-mode t)
  (add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
  (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                  "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                  crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
  (setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
  (setq user-emacs-directory "~/.config/emacs")
  (setq bookmark-default-file "~/.config/emacs/files/bookmarks")
  (setq auth-sources '("~/Dokumenty/tajne/.authinfo.gpg"))
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font"  :height 100)
  :init
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

(use-package recentf
  :ensure nil
  :custom
  (recentf-mode 1)
  :config
  (setq recentf-save-file "~/.config/emacs/files/recentf")
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25))

(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  (setq savehist-file "~/.config/emacs/files/savehist")
  (setq history-length 100)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (add-to-list 'savehist-additional-variables 'kill-ring))
#+end_src

* KEYBINDINGS
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** [[https://github.com/emacs-evil/evil][Evil Mode]]
#+begin_src emacs-lisp
(use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-fu)
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "C-n") 'evil-window-vnew)
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "C-t") 'tab-new)
  (define-key evil-normal-state-map (kbd "C-j") 'tab-next)
  (define-key evil-normal-state-map (kbd "C-k") 'tab-previous)
  (define-key evil-normal-state-map (kbd "C-q") 'evil-window-delete)
  (define-key evil-normal-state-map (kbd "C-S-J") 'evil-window-move-far-left)
  (define-key evil-normal-state-map (kbd "C-S-K") 'evil-window-move-far-right)
  (define-key evil-normal-state-map (kbd "C-S-H") 'previous-buffer)
  (define-key evil-normal-state-map (kbd "C-S-L") 'next-buffer)
  (define-key evil-normal-state-map (kbd "gh") 'evil-beginning-of-line)
  (define-key evil-normal-state-map (kbd "gl") 'evil-end-of-line)
  (define-key evil-normal-state-map (kbd "gcc") 'comment-line)
  (define-key evil-normal-state-map (kbd "gcr") 'comment-or-uncomment-region)
)

(setq-default evil-cross-lines t)
(setq org-return-follows-link  t)
#+end_src

** [[https://github.com/noctuid/general.el][General]]
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  (general-create-definer me/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (me/leader-keys
    "SPC" '(execute-extended-command :wk "M-x")
    "RET" '(counsel-bookmark :wk "Bookmarks")
    "/" '(counsel-ibuffer :wk "Buffers")
    "?" '(zoxide-travel :wk "Zoxide")
    "." '(counsel-find-file :wk "Find file")
    ">" '(dired-jump :wk "Dired")
    "," '(counsel-fzf :wk "Fuzzy finding")
    "<" '(counsel-rg :wk "Grep"))

  (me/leader-keys
    "b" '(:ignore t :wk "Bookmarks")
    "b m" '(bookmark-set :wk "Add to bookmarks")
    "b s" '(bookmark-save :wk "Save bookmarks"))

  (me/leader-keys
    "f" '(:ignore t :wk "Files")
    "f p" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Emacs Config")
    "f P" '((lambda () (interactive) (counsel-find-file "~/.config/emacs/")) :wk "Emacs Config")
    "f r" '(counsel-recentf :wk "Recent files")
    "f u" '(sudo-edit :wk "Sudo edit file")
    "f U" '(sudo-edit-find-file :wk "Sudo find file"))

  (me/leader-keys
    "h" '(:ignore t :wk "Emacs")
    "h t" '(counsel-load-theme :wk "Change theme")
    "h l" '(elpaca-update-all :wk "Elpaca: update packages")
    "h r" '((lambda () (interactive) (load-file "~/.dotfiles/.config/emacs/init.el") (ignore (elpaca-process-queues))) :wk "Reload emacs config"))

  (me/leader-keys
    "n" '(:ignore t :wk "Files")
    "n n" '((lambda () (interactive) (counsel-find-file "~/Dokumenty/notatki/")) :wk "Notes"))
  
  (me/leader-keys
    "p" '(:ignore t :wk "Packages")
    "p x" '(org-capture :wk "Org Capture")
    "p a" '(org-agenda :wk "Org Agenda")
    "p e" '(elfeed :wk "Elfeed")
    "p w" '(eww :wk "EWW")
    "p W" '(eww-list-bookmarks :wk "EWW Bookmarks"))

  (me/leader-keys
    "s" '(:ignore t :wk "Search")
    "s b" '(swiper :wk "Search line")
    "s p" '(counsel-yank-pop :wk "Yank pop")
    "s l" '(counsel-imenu :wk "Search headings"))
  
  (me/leader-keys
    "t" '(:ignore t :wk "Toggles")
    "t w" '(whitespace-mode :wk "Whitespace mode")
    "t v" '(visual-fill-column-mode :wk "Visual fill column")
    "t f" '(follow-mode :wk "Follow mode")
    "t r" '(rainbow-mode :wk "Rainbow mode"))

  (me/leader-keys
    "e" '(:ignore t :wk "Eglot")
    "e l" '(eglot :wk "Launch Eglot")
    "e a" '(eglot-code-actions :wk "Eglot Code Actions"))
  
  (me/leader-keys
    "z" '(:ignore t :wk "Spellcheck")
    "z f" '(flyspell-mode :wk "Flyspell mode")
    "z a" '(flyspell-correct-word-before-point :wk "Add word to dictionary")
    "z C" '(flyspell-auto-correct-word :wk "Autocorrect with Flyspell")
    "z i" '(ispell :wk "Ispell"))
  
  (general-nmap
    :keymaps 'org-mode-map
    "m" '(:ignore t :wk "Org")
    "m a" 'org-insert-link
    "m A" 'link-hint-copy-link-at-point
    "m t" 'org-todo
    "m d" 'org-deadline
    "m s" 'org-schedule
    "m r" 'org-refile
    "m p" 'org-priority
    "m c" 'org-toggle-checkbox
    "m n" 'org-add-note
    "m l" 'org-cycle-list-bullet
    "m H" 'org-metaleft
    "m L" 'org-metaright
    "m J" 'org-metadown
    "m K" 'org-metaup
    "t" '(:ignore t :wk "Tabela")
    "t s" 'org-table-sort-lines
    "t a" 'org-table-sum
    "t n" 'org-table-insert-column
    "t h" 'org-table-move-column-left
    "t l" 'org-table-move-column-right
    "t j" 'org-table-move-row-down)
  
  (general-nmap
    :keymaps 'markdown-mode-map
    "m H" 'markdown-promote
    "m L" 'markdown-demote
    "m J" 'markdown-move-down
    "m K" 'markdown-move-up
    "w l" 'markdown-insert-link
    "w i" 'markdown-insert-image
    "t p" 'markdown-preview
    "t h" 'markdown-toggle-url-hiding
    "t i" 'markdown-toggle-inline-images)
  
  (general-nmap
    :keymaps 'dired-mode-map
    "y d" 'dired-copy-dirname-as-kill
    "y c" 'dired-copy-path-at-point
    "." 'zoxide-travel
    "c" 'dired-do-copy
    "C" 'dired-do-copy
    "r" 'dired-do-rename
    "R" 'dired-do-rename
    "h" 'dired-up-directory
    "l" 'dired-open-file)
  
  (general-nmap
    :keymaps 'elfeed-search-mode-map
    "W" 'elfeed-search-browse-url
    "M" 'elfeed-mark-all-as-read
    "O" 'elfeed-update)
)
#+end_src

** [[https://github.com/justbur/emacs-which-key][Which Key]]
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

* PACKAGES
** [[https://github.com/Malabarba/beacon][Beacon]]
#+begin_src emacs-lisp
(use-package beacon
  :init
  (beacon-mode 1))
#+end_src

** Completion
*** [[https://github.com/abo-abo/swiper][Counsel/Ivy]]
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1)
  (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x
#+end_src
*** [[https://github.com/Yevgnen/ivy-rich][Ivy Rich]]
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1)
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src
*** [[https://github.com/radian-software/prescient.el][Ivy Prescient]]
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :defer
  :hook
  (dired-mode . hl-line-mode)
  (dired-mode . auto-revert-mode)
  :config
  (setq dired-listing-switches
      "-AGFhlv --group-directories-first")
  :custom
  (dired-do-revert-buffer t)
  (dired-auto-revert-buffer t)
  (delete-by-moving-to-trash t)
  (dired-dwim-target t))
#+end_src

*** [[https://emacs.stackexchange.com/questions/36850/copy-to-kill-ring-selected-file-names-full-path][Copy path at point]]
#+begin_src emacs-lisp
(defun dired-copy-path-at-point ()
    (interactive)
    (dired-copy-filename-as-kill 0))
#+end_src

*** [[https://stackoverflow.com/questions/2416655/file-path-to-clipboard-in-emacs][Copy directory name]]
#+begin_src emacs-lisp
(defun dired-copy-dirname-as-kill ()
  "Copy the current directory into the kill ring."
  (interactive)
  (kill-new default-directory))
#+end_src

*** Dired Open
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "feh")
                                ("jpg" . "feh")
                                ("png" . "feh")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv")
                                ("flac" . "mpv")
                                ("mp3" . "mpv")
                                ("pdf" . "zen-browser"))))
#+end_src

** [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 30
        doom-modeline-bar-width 5
        doom-modeline-enable-word-count t
        doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
        doom-modeline-buffer-file-name-style 'truncate-all))
#+end_src

** Eglot
*** [[https://github.com/Automattic/harper/][Harper]]
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(markdown-mode . ("harper-ls" "--stdio"))))

(setq-default eglot-workspace-configuration
              '(:harper-ls (:userDictPath ""
                            :fileDictPath ""
                            :linters (:SpellCheck t
                                      :SpelledNumbers :json-false
                                      :AnA t
                                      :SentenceCapitalization t
                                      :UnclosedQuotes t
                                      :WrongQuotes :json-false
                                      :LongSentences t
                                      :RepeatedWords t
                                      :Spaces t
                                      :Matcher t
                                      :CorrectNumberSuffix t)
                            :codeActions (:ForceStable :json-false)
                            :markdown (:IgnoreLinkTitle :json-false)
                            :diagnosticSeverity "hint"
                            :isolateEnglish :json-false
                            :dialect "American"
                            :maxFileLength 120000)))
#+end_src

** [[https://github.com/skeeto/elfeed][Elfeed]]
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #b3b8c3 :weight bold")
  (setq elfeed-db-directory "~/.config/emacs/files/elfeed/database"))

(defun elfeed-mark-all-as-read ()
  (interactive)
  (elfeed-untag elfeed-search-entries 'unread)
  (elfeed-search-update :force)) ; redraw
#+end_src

*** [[https://github.com/jeetelongname/elfeed-goodies][Elfeed Goodies]]
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

*** [[https://github.com/remyhonig/elfeed-org][Elfeed-org]]
#+begin_src emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (setq rmh-elfeed-org-files (list "~/.config/emacs/files/elfeed/elfeed.org"))
  (elfeed-org))
#+end_src

** [[https://github.com/edkolev/evil-goggles][Evil Goggles]]
#+begin_src emacs-lisp
(use-package evil-goggles
  :ensure t
  :config
  (evil-goggles-mode))
  ;; (evil-goggles-use-diff-faces)
#+end_src

** EWW
#+begin_src emacs-lisp
(setq
 browse-url-browser-function 'eww-browse-url
 shr-use-fonts  nil
 ;; shr-use-colors nil
 shr-indentation 2
 ;; shr-indentation 70 
 shr-width 100
 eww-auto-rename-buffer 1
 eww-download-directory "~/Pobrane"
 eww-bookmarks-directory "~/.config/emacs/files/"
 eww-search-prefix "https://frogfind.com/?q="
 browse-url-secondary-browser-function 'browse-url-xdg-open)

(add-hook 'eww-after-render-hook 'eww-readable)

(defun eww-new ()
  (interactive)
  (let ((url (read-from-minibuffer "Enter URL or keywords: ")))
    (switch-to-buffer (generate-new-buffer "eww"))
    (eww-mode)
    (eww url)))
#+end_src

** Insert date / time 
#+begin_src emacs-lisp
(defun insert-todays-date (arg)
  (interactive "U")
  (insert (if arg
          (format-time-string "%d-%m-%Y")
          (format-time-string "%Y-%m-%d"))))

(defun insert-current-time (arg)
  (interactive "U")
  (insert (if arg
          (format-time-string "%R")
          (format-time-string "%H:%M"))))
#+end_src

** Ispell / Flyspell
#+begin_src emacs-lisp
(with-eval-after-load "ispell"
  (setenv "LANG" "pl_PL.UTF-8")
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "pl_PL,en_US")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "pl_PL,en_US")
  (setq ispell-personal-dictionary "~/.config/emacs/files/hunspell_personal"))

(setq ispell-silently-savep t)
(setq flyspell-issue-message-flag nil)
;; (add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

** [[https://www.emacswiki.org/emacs/KillingBuffers#h5o-2][Kill Other Buffers]]
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

** [[https://github.com/jrblevin/markdown-mode][Markdown Mode]]
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :init
  (setq markdown-unordered-list-item-prefix "  -")
  (setq markdown-hide-urls t)
  (setq markdown-command
      (concat
      "pandoc"
      " --from=markdown --to=html"
      " --standalone --mathjax --highlight-style=pygments")))
#+end_src

** [[https://github.com/twlz0ne/nerd-fonts.el][Nerd Icons]]
#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t
  :defer t)

(use-package nerd-icons-dired
  :ensure t
  :defer t
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-completion
  :ensure t
  :after (:all nerd-icons marginalia)
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Org-mode
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :config
  (setq org-ellipsis " ▾")
  (setq org-src-preserve-indentation t)
  (setq calendar-week-start-day 1)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-hide-emphasis-markers t)
  (customize-set-variable 'org-blank-before-new-entry
                          '((heading . nil)
                          (plain-list-item . nil)))
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-files
  '("~/Dokumenty/notatki/agenda/Taski.org"
    "~/Dokumenty/notatki/agenda/Powtarzalne.org"
    "~/Dokumenty/notatki/agenda/Ważne.org"))
  (setq org-agenda-span 10
      org-agenda-start-on-weekday nil
      org-agenda-start-day "-2d")
  (setq org-agenda-prefix-format
      (quote
      ((agenda . "%-20c%?-12t% s")
          (timeline . "% s")
          (todo . "%-12c")
          (tags . "%-12c")
          (search . "%-12c"))))
  (setq org-agenda-deadline-leaders (quote (":" "D%2d: " "")))
  (setq org-agenda-scheduled-leaders (quote ("" "S%3d: ")))
  (setq org-agenda-current-time-string "← now")
  (setq org-agenda-time-grid '((daily today require-timed) (800 1000 1200 1400 1600 1800 2000)
                              " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dokumenty/notatki/agenda/taski.org" "ZADANIA")
          "* TODO %?\n  %i\n ")))
  (setq org-refile-targets
  '(("Archiwum.org" :maxlevel . 1)))
      ;; ("agenda-agenda.org" :maxlevel . 1)
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  (setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w)" "FIXME(f)" "|" "CANCELED(c)" "DONE(d)")))
  (setq org-todo-keyword-faces
      '(("TODO" . (:foreground "#b04b57" :weight bold))
        ("WAIT" . (:foreground "#e5c179" :weight bold))
        ("FIXME" . (:foreground "#a47996" :weight bold))
        ("CANCELED" . (:foreground "#85a7a5" :weight bold))
        ("DONE" . (:foreground "#87b379" :weight bold)))))

(use-package org-tempo
  :ensure nil)

(use-package org-habit
  :ensure nil
  :config
  (setq org-habit-graph-column 60))
#+end_src

*** [[https://github.com/sabof/org-bullets][Org Bullets]]
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** [[https://github.com/harrybournis/org-fancy-priorities][Org Fancy Priorities]] 
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq
     org-fancy-priorities-list '(" " " " "!")
     org-priority-faces
     '((?A :foreground "#b04b57")
       (?B :foreground "#e5c179")
       (?C :foreground "#87b379"))))
#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimiters]]
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src

** [[https://github.com/emacsmirror/rainbow-mode][Rainbow Mode]]
#+begin_src emacs-lisp
(use-package rainbow-mode
  :defer
  :ensure t
  :hook (prog-mode . rainbow-mode))
#+end_src

** [[https://github.com/hlissner/emacs-solaire-mode][Solaire Mode]]
#+begin_src emacs-lisp
(use-package solaire-mode
  :init
  (solaire-global-mode +1))
#+end_src

** [[https://github.com/nflath/sudo-edit][Sudo Edit]]
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Tab Bar Mode
#+begin_src emacs-lisp
(setq tab-bar-new-tab-choice "*scratch*"
      tab-bar-close-button-show nil
      tab-bar-new-button-show nil
      tab-bar-close-last-tab-choice 'tab-bar-mode-disable
      tab-bar-close-tab-select 'recent
      tab-bar-new-tab-to 'right
      tab-bar-tab-hints nil
      tab-bar-separator " "
      tab-bar-show 1)
#+end_src

** Themes
*** [[https://github.com/catppuccin/emacs][Catppuccin]]
#+begin_src emacs-lisp
(use-package catppuccin-theme)
#+end_src

*** [[https://github.com/Fabiokleis/kanagawa-emacs][Kanagawa]]
#+begin_src emacs-lisp
(use-package kanagawa-themes
  :config
  (setq kanagawa-themes-org-agenda-height nil
        kanagawa-themes-org-bold nil
        kanagawa-themes-org-height nil
        kanagawa-themes-org-highlight nil
        kanagawa-themes-org-priority-bold nil))
#+end_src

*** [[https://github.com/doomemacs/themes][Doom Themes]]
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-spacegrey t)
  (doom-themes-org-config))
#+end_src

** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

** [[https://github.com/emacsmirror/undo-fu][Undo-fu]]
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

** [[https://codeberg.org/joostkremers/visual-fill-column][Visual Fill Column]]
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :custom
  (visual-fill-column-width 120)
  (visual-fill-column-center-text t))
#+end_src

** xclip
#+begin_src emacs-lisp
(use-package xclip
  :ensure t
  :defer t
  :hook
  (after-init . xclip-mode))
#+end_src

** [[https://gitlab.com/Vonfry/zoxide.el][Zoxide]]
#+begin_src emacs-lisp
(use-package zoxide)
#+end_src

* RUNTIME PERFORMANCE
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
