#+TITLE: ch1ebak's cool emacs config 2: electric boogaloo
#+AUTHOR: ch1ebak

* STARTUP PERFORMANCE
#+begin_src emacs-lisp
;; (setq gc-cons-threshold (* 50 1000 1000))
(setq gc-cons-threshold #x40000000)
(setq read-process-output-max (* 1024 1024 4))
#+end_src

* [[https://github.com/progfolio/elpaca][ELPACA]]
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

(elpaca-wait)
#+end_src

* SETTINGS
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (delete-selection-mode 1)
  (electric-indent-mode -1)
  (electric-pair-mode 1)
  (set-fringe-mode 5)
  (blink-cursor-mode nil)
  (column-number-mode t)
  (auto-save-default nil)
  (create-lockfiles nil)
  (global-auto-revert-non-file-buffers t)
  (history-length 25)
  (inhibit-startup-message t)
  (initial-scratch-message "")
  (pixel-scroll-precision-mode t)
  (pixel-scroll-precision-use-momentum nil)
  (ring-bell-function 'ignore)
  (switch-to-buffer-obey-display-actions t)
  (tab-width 2)
  (truncate-lines t)
  (use-dialog-box nil)
  (use-short-answers t)
  (warning-minimum-level :emergency)

  :hook
  (prog-mode . display-line-numbers-mode)

  :config
  (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font"  :height 100)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 100)
  (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?│))
  (setq use-file-dialog nil
        pop-up-windows nil
        shell-file-name "/usr/bin/bash")

  :init
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (when scroll-bar-mode
    (scroll-bar-mode -1))

  (global-visual-line-mode 1)
  (global-hl-line-mode 1)
  (global-auto-revert-mode 1)
  (indent-tabs-mode -1)
  (save-place-mode 1)
  (winner-mode 1)
  (file-name-shadow-mode 1)
  (modify-coding-system-alist 'file "" 'utf-8))

(setq display-line-numbers-type 'relative) 
(global-display-line-numbers-mode)

(setq conf-unix-mode t)
(add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))

(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

*** Clean-up
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src

*** Paths
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
(setq user-emacs-directory "~/.config/emacs")
(setq bookmark-default-file "~/.config/emacs/files/bookmarks")
(setq recentf-save-file "~/.config/emacs/files/recentf")
(setq auth-sources '("~/Dokumenty/tajne/.authinfo.gpg"))

(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

*** Recent files
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
#+end_src

*** Savehist
#+begin_src emacs-lisp
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  (setq savehist-file "~/.config/emacs/files/savehist")
  (setq history-length 100)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (add-to-list 'savehist-additional-variables 'kill-ring))
#+end_src

*** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

* KEYBINDINGS
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** [[https://github.com/emacs-evil/evil][Evil Mode]]
#+begin_src emacs-lisp
(use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-fu)
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line))

(setq-default evil-cross-lines t)
(setq org-return-follows-link  t)
#+end_src

*** [[https://github.com/linktohack/evil-commentary][Evil Commentary]]
#+begin_src emacs-lisp
(use-package evil-commentary
  :init
  (evil-commentary-mode))
#+end_src

** [[https://github.com/noctuid/general.el][General]]
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  (general-create-definer me/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (me/leader-keys
    "SPC" '(execute-extended-command :wk "M-x")
    "RET" '(zoxide-travel :wk "List bookmarks")
    "/" '(consult-buffer :wk "Consult Buffer")
    "?" '(kill-buffer :wk "Kill buffer")
    "." '(find-file :wk "Find file")
    ">" '(dired-jump :wk "Dired")
    "," '(consult-find :wk "Fuzzy finding")
    "<" '(consult-ripgrep :wk "Grep"))
                                                                                    
  (me/leader-keys
    "TAB" '(:ignore t :wk "Buffers/Tabs/Windows")
    "TAB q" '(evil-window-delete :wk "Close window")
    "TAB Q" '(kill-emacs :wk "Close window")
    "TAB x" '(kill-other-buffers :wk "Kill other buffers")
    "TAB RET" '(evil-window-vnew :wk "New window")
    "TAB h" '(evil-window-left :wk "Window left")
    "TAB l" '(evil-window-right :wk "Window down")
    "TAB J" '(evil-window-move-far-left :wk "Move window left")
    "TAB K" '(evil-window-move-far-right :wk "Move window right")
    "TAB n" '(tab-new :wk "New tab")
    "TAB j" '(tab-next :wk "Next tab")
    "TAB k" '(tab-previous :wk "Previous tab")
    "TAB r" '(tab-rename :wk "Rename tab")
    "TAB H" '(previous-buffer :wk "Buffer previous")
    "TAB L" '(next-buffer :wk "Buffer next"))

  (me/leader-keys
    "b" '(:ignore t :wk "Bookmarks")
    "b m" '(bookmark-set :wk "Add to bookmarks")
    "b s" '(bookmark-save :wk "Save bookmarks"))

  (me/leader-keys
    "c" '(:ignore t :wk "Comments")
    "c c" '(comment-line :wk "Comment Line")
    "c r" '(comment-or-uncomment-region :wk "Comment Region"))
  
  (me/leader-keys
    "f" '(:ignore t :wk "Files")
    "f p" '((lambda () (interactive) (find-file "~/.dotfiles/.config/emacs/config.org")) :wk "Emacs Config")
    "f r" '(recentf :wk "Recent files")
    "f u" '(sudo-edit :wk "Sudo edit file")
    "f U" '(sudo-edit-find-file :wk "Sudo find file"))

  (me/leader-keys
    "h" '(:ignore t :wk "Emacs")
    "h t" '(consult-theme :wk "Change theme")
    "h e" '(:ignore t :wk "Elpaca")
    "h e m" '(elpaca-manager :wk "Elpaca manager")
    "h e u" '(elpaca-update-all :wk "Elpaca: update packages")
    "h e d" '(elpaca-delete :wk "Elpaca: delete package")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive) (load-file "~/.dotfiles/.config/emacs/init.el") (ignore (elpaca-process-queues))) :wk "Reload emacs config"))
  
  (me/leader-keys
    "n n" '((lambda () (interactive) (find-file "~/Dokumenty/notatki/index.md")) :wk "Notes")
    "n N" '((lambda () (interactive) (consult-find "~/Dokumenty/notatki/")) :wk "Notes"))

  (me/leader-keys
    "p" '(:ignore t :wk "Packages")
    "p x" '(org-capture :wk "Org Capture")
    "p a" '(org-agenda :wk "Org Agenda")
    "p e" '(elfeed :wk "Elfeed")
    "p p" '(pocket-reader :wk "Pocket")
    "p t" '(term :wk "Terminal")
    "p w" '(eww :wk "EWW")
    "p W" '(eww-list-bookmarks :wk "EWW Bookmarks"))

  (me/leader-keys
    "s" '(:ignore t :wk "Search")
    "s b" '(consult-line :wk "Search line")
    "s p" '(consult-imenu :wk "Consult imenu")
    "s l" '(consult-org-heading :wk "Search org headings"))
  
  (me/leader-keys
    "t" '(:ignore t :wk "Toggles")
    "t l" '(org-toggle-link-display :wk "Toggle link display")
    "t i" '(org-toggle-inlay-images :wk "Toggle inlay images")
    "t w" '(whitespace-mode :wk "Whitespace mode")
    "t g" '(writegood-mode :wk "Writegood mode")
    "t v" '(visual-fill-column-mode :wk "Visual fill column")
    "t f" '(follow-mode :wk "Follow mode")
    "t r" '(rainbow-mode :wk "Rainbow mode"))
  
  (general-nmap
    :keymaps 'org-mode-map
    "m" '(:ignore t :wk "Org")
    "m a" 'org-insert-link
    "m A" 'link-hint-copy-link-at-point
    "m t" 'org-todo
    "m d" 'org-deadline
    "m s" 'org-schedule
    "m r" 'org-refile
    "m p" 'org-priority
    "m c" 'org-toggle-checkbox
    "m n" 'org-add-note
    "m l" 'org-cycle-list-bullet
    "m H" 'org-metaleft
    "m L" 'org-metaright
    "m J" 'org-metadown
    "m K" 'org-metaup
    "M" 'org-sidebar-tree-toggle
    "t" '(:ignore t :wk "Tabela")
    "t s" 'org-table-sort-lines
    "t a" 'org-table-sum
    "t n" 'org-table-insert-column
    "t h" 'org-table-move-column-left
    "t l" 'org-table-move-column-right
    "t j" 'org-table-move-row-down
    "s" '(:ignore t :wk "Pisownia")
    "s f" 'flyspell-mode
    "s c" 'flyspell-auto-correct-word
    "s a" 'flyspell-correct-word-before-point
    "s t" 'powerthesaurus-transient
    "s i" 'ispell)
  
  (general-nmap
    :keymaps 'markdown-mode-map
    "m a" 'markdown-insert-link
    "m H" 'markdown-promote
    "m L" 'markdown-demote
    "m J" 'markdown-move-down
    "m K" 'markdown-move-up
    "t t" 'markdown-insert-table)
  
  (general-nmap
    :keymaps 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-open-file)
  
  (general-nmap
    :keymaps 'elfeed-search-mode-map
    "W" 'elfeed-search-browse-url
    "M" 'elfeed-mark-all-as-read
    "P" 'pocket-reader-elfeed-search-add-link
    "O" 'elfeed-update)
  
  (general-nmap
    :keymaps 'pocket-reader-mode-map
    "F" 'pocket-reader-show-unread-favorites
    "&" 'pocket-reader-open-in-external-browser)
)
#+end_src

** [[https://github.com/justbur/emacs-which-key][Which Key]]
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

* PACKAGES
** [[https://github.com/Malabarba/beacon][Beacon]]
#+begin_src emacs-lisp
(use-package beacon
  :init
  (beacon-mode 1))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom 
  ;; (dired-listing-switches "-agho --group-directories-first")
  ;; (dired-listing-switches "-la --group-directories-first")
  (dired-listing-switches "-AlhoF --group-directories-first")
  :config
  (setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/"))

(add-hook 'dired-mode-hook 'auto-revert-mode)
#+end_src

*** Dired Open
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "nsxiv")
                                ("jpg" . "nsxiv")
                                ("png" . "nsxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv")
                                ("pdf" . "zen-browser"))))
#+end_src

** [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
 (setq doom-modeline-height 30
       doom-modeline-bar-width 5
       doom-modeline-enable-word-count t
       doom-modeline-continuous-word-count-modes '(org-mode)
       doom-modeline-buffer-file-name-style 'truncate-all))
#+end_src

** [[https://github.com/skeeto/elfeed][Elfeed]]
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #b3b8c3 :weight bold")
  (setq elfeed-db-directory "~/.config/emacs/files/elfeed/database"))

(defun elfeed-mark-all-as-read ()
  (interactive)
  (elfeed-untag elfeed-search-entries 'unread)
  (elfeed-search-update :force)) ; redraw
#+end_src

*** [[https://github.com/jeetelongname/elfeed-goodies][Elfeed Goodies]]
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

*** [[https://github.com/remyhonig/elfeed-org][Elfeed-org]]
#+begin_src emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (setq rmh-elfeed-org-files (list "~/.config/emacs/files/elfeed/elfeed.org"))
  (elfeed-org))
#+end_src

** [[https://github.com/edkolev/evil-goggles][Evil Goggles]]
#+begin_src emacs-lisp
(use-package evil-goggles
  :ensure t
  :config
  (evil-goggles-mode))
#+end_src

** EWW
#+begin_src emacs-lisp
(setq
 browse-url-browser-function 'eww-browse-url
 shr-use-fonts  nil
 ;; shr-use-colors nil
 shr-indentation 2
 ;; shr-indentation 70 
 shr-width 100
 eww-auto-rename-buffer 1
 eww-download-directory "~/Pobrane"
 eww-bookmarks-directory "~/.config/emacs/files/"
 eww-search-prefix "https://frogfind.com/?q="
 browse-url-secondary-browser-function 'browse-url-xdg-open)

(add-hook 'eww-after-render-hook 'eww-readable)

(defun eww-new ()
  (interactive)
  (let ((url (read-from-minibuffer "Enter URL or keywords: ")))
    (switch-to-buffer (generate-new-buffer "eww"))
    (eww-mode)
    (eww url)))
#+end_src

** [[https://github.com/zk-phi/indent-guide][Indent Guide]]
#+begin_src emacs-lisp
(use-package indent-guide
  :defer t
  :ensure t
  :hook
  (prog-mode . indent-guide-mode)
  :config
  (setq indent-guide-char "│"))
#+end_src

** Insert date / time 
#+begin_src emacs-lisp
(defun insert-todays-date (arg)
  (interactive "U")
  (insert (if arg
          (format-time-string "%d-%m-%Y")
          (format-time-string "%Y-%m-%d"))))

(defun insert-current-time (arg)
  (interactive "U")
  (insert (if arg
          (format-time-string "%R")
          (format-time-string "%H:%M"))))
#+end_src

** Ispell / Flyspell
#+begin_src emacs-lisp
(with-eval-after-load "ispell"
  (setenv "LANG" "pl_PL.UTF-8")
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "pl_PL,en_US")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "pl_PL,en_US")
  (setq ispell-personal-dictionary "~/.config/emacs/files/hunspell_personal"))

(setq ispell-silently-savep t)
(setq flyspell-issue-message-flag nil)
;; (add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

** [[https://www.emacswiki.org/emacs/KillingBuffers#h5o-2][Kill Other Buffers]]
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

** [[https://github.com/jrblevin/markdown-mode][Markdown Mode]]
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\.njk\\'" . gfm-mode)
  :custom
  (markdown-hide-urls t)
  :init (setq markdown-command "markdown"))

(add-to-list 'auto-mode-alist '("\\.njk\\'" . web-mode))
(add-to-list 'auto-mode-alist
             '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+end_src

** [[https://protesilaos.com/emacs/modus-themes][Modus Themes]]
#+begin_src emacs-lisp
(setq modus-themes-mode-line '(borderless)
      modus-themes-region '(bg-only no-extend)
      modus-themes-bold-constructs t
      modus-themes-italic-constructs t
      modus-themes-paren-match '(bold)
      modus-themes-syntax '(alt-syntax)
      modus-themes-org-blocks 'gray-background
      modus-themes-fringes 'subtle
      modus-themes-prompts '(bold))
(load-theme 'modus-vivendi t)
#+end_src

** [[https://github.com/twlz0ne/nerd-fonts.el][Nerd Fonts]]
#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t
  :defer t)

(use-package nerd-icons-dired
  :ensure t
  :defer t
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-completion
  :ensure t
  :after (:all nerd-icons marginalia)
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Org-mode
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :defer t
	:custom
  (org-src-fontify-natively t)
  (org-M-RET-may-split-line '((default . nil)))
  (org-pretty-entities t)
  (org-image-actual-width nil)
	:config
  (setq org-ellipsis " ▾"
        org-src-preserve-indentation t
        calendar-week-start-day 1
        org-log-done 'time
        org-log-into-drawer t
        org-hide-emphasis-markers t
        org-agenda-start-with-log-mode t
        org-agenda-span 10
        org-agenda-start-on-weekday nil
        org-agenda-start-day "-2d"
        org-agenda-files
        '("~/Dokumenty/notatki/agenda/agenda-taski.org"
          "~/Dokumenty/notatki/agenda/agenda-powtarzalne.org"
          "~/Dokumenty/notatki/agenda/agenda-ważne.org")
        org-agenda-prefix-format
            (quote
            ((agenda . "%-20c%?-12t% s")
                (timeline . "% s")
                (todo . "%-12c")
                (tags . "%-12c")
                (search . "%-12c")))
        org-agenda-deadline-leaders (quote (":" "D%2d: " ""))
        org-agenda-scheduled-leaders (quote ("" "S%3d: "))
        org-capture-templates
            '(("t" "Todo" entry (file+headline "~/Dokumenty/notatki/agenda/agenda-taski.org" "ZADANIA")
                "* TODO %?\n  %i\n "))                    
        org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "FIXME(f)" "|" "CANCELED(c)" "DONE(d)"))
        org-todo-keyword-faces
            '(("TODO" . (:foreground "#b04b57" :weight bold))
              ("WAIT" . (:foreground "#e5c179" :weight bold))
              ("FIXME" . (:foreground "#a47996" :weight bold))
              ("CANCELED" . (:foreground "#85a7a5" :weight bold))
              ("DONE" . (:foreground "#87b379" :weight bold)))))

(setq org-agenda-current-time-string "← now")
(setq org-agenda-time-grid '((daily today require-timed) (800 1000 1200 1400 1600 1800 2000)	
                             " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))

(customize-set-variable 'org-blank-before-new-entry
                        '((heading . nil)
                          (plain-list-item . nil)))
#+end_src

*** [[https://github.com/sabof/org-bullets][Org Bullets]]
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Org Habit
#+begin_src emacs-lisp
(use-package org-habit
  :ensure nil
  :custom
  (org-habit-graph-column 45))
#+end_src

*** [[https://github.com/harrybournis/org-fancy-priorities][Org Fancy Priorities]] 
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq
     org-fancy-priorities-list '(" " " " "!")
     org-priority-faces
     '((?A :foreground "#b04b57")
       (?B :foreground "#e5c179")
       (?C :foreground "#87b379"))))
#+end_src

*** Org Refile
#+begin_src emacs-lisp
(setq org-refile-targets
  '(("archiwum.org" :maxlevel . 1)))
(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

*** [[https://github.com/alphapapa/org-sidebar][Org Sidebar]]
#+begin_src emacs-lisp
(use-package org-sidebar)
#+end_src

*** Org Tempo
#+begin_src emacs-lisp
(use-package org-tempo
	:ensure nil
  :after org)
#+end_src

** [[https://github.com/alphapapa/pocket-reader.el][Pocket Reader]]
#+begin_src emacs-lisp
(use-package pocket-reader)
(setq pocket-reader-open-url-default-function #'eww)
(setq pocket-reader-pop-to-url-default-function #'eww)
(add-hook 'pocket-reader-mode (lambda () (display-line-numbers-mode 0)))
#+end_src

** [[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][Powerthesaurus]]
#+begin_src emacs-lisp
(use-package powerthesaurus)
#+end_src
                                                                                       
** [[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimiters]]
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

** [[https://github.com/emacsmirror/rainbow-mode][Rainbow Mode]]
#+begin_src emacs-lisp
(use-package rainbow-mode
  :defer
  :ensure t
  :hook (prog-mode . rainbow-mode))
#+end_src

** [[https://github.com/hlissner/emacs-solaire-mode][Solaire Mode]]
#+begin_src emacs-lisp
(use-package solaire-mode
  :init
  (solaire-global-mode +1))
#+end_src

** [[https://github.com/nflath/sudo-edit][Sudo Edit]]
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Tab Bar Mode
#+begin_src emacs-lisp
(setq tab-bar-new-tab-choice "*scratch*"
      tab-bar-close-button-show nil
      tab-bar-new-button-show nil
      tab-bar-close-last-tab-choice 'tab-bar-mode-disable
      tab-bar-close-tab-select 'recent
      tab-bar-new-tab-to 'right
      tab-bar-tab-hints nil
      tab-bar-separator " "
      tab-bar-show 1)
#+end_src

** [[https//github.com/minad/vertico][Vertico]]
#+begin_src emacs-lisp
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a character backward"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (delete-backward-char arg)))

(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :config
  (setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t)
  :custom
  (vertico-cycle t)
  (vertico-count 10)
  (vertico-resize t)
  :init
  (vertico-mode))
#+end_src

*** [[https://github.com/minad/marginalia][Marginalia]]
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-align 'right)
  (marginalia-max-relative-age 0)
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

*** [[https://github.com/minad/consult][Consult]]
#+begin_src emacs-lisp
(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<")
)
#+end_src

*** [[https://github.com/oantolin/orderless][Orderless]]
#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** [[https://github.com/emacsmirror/undo-fu][Undo-Fu]]
#+begin_src emacs-lisp
(use-package undo-fu)
#+end_src

** [[https://codeberg.org/joostkremers/visual-fill-column][Visual Fill Column]]
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :custom
  (visual-fill-column-width 120)
  (visual-fill-column-center-text t))
#+end_src

** [[https://github.com/bnbeckwith/writegood-mode][Writegood Mode]]
#+begin_src emacs-lisp
(use-package writegood-mode
  :config
  (writegood-weasels-turn-on)
  (writegood-passive-voice-turn-on)
  (writegood-duplicates-turn-on)
  (add-hook 'text-mode-hook 'writegood-mode))
#+end_src

** xclip
#+begin_src emacs-lisp
(use-package xclip
  :ensure t
  :defer t
  :hook
  (after-init . xclip-mode))
#+end_src

** [[https://github.com/emacsmirror/zoxide][Zoxide]]
#+begin_src emacs-lisp
(use-package zoxide)
(defun dired-jump-with-zoxide (&optional other-window)
   (interactive "P")
   (zoxide-open-with nil (lambda (file) (dired-jump other-window file)) t))
#+end_src

* RUNTIME PERFORMANCE
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
