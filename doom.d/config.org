#+TITLE: Config - Doom Emacs
#+AUTHOR: ch1ebak
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t

* TABLE OF CONTENTS :toc:
- [[#all-the-icons][All the icons]]
  - [[#all-the-icons---ivy][All the icons - ivy]]
  - [[#ivy-rich][Ivy Rich]]
- [[#calendar][Calendar]]
- [[#counsel][Counsel]]
- [[#dimmer][Dimmer]]
- [[#dired][Dired]]
- [[#elfeed][Elfeed]]
- [[#expand-region][Expand region]]
- [[#fonts][Fonts]]
- [[#ivy][Ivy]]
  - [[#ivy-rich-1][Ivy Rich]]
  - [[#ivy-postframe][Ivy Postframe]]
- [[#ledger][Ledger]]
- [[#maximize-buffer][Maximize buffer]]
- [[#mu4e][MU4E]]
  - [[#mu4e-alert][mu4e alert]]
- [[#mpd][mpd]]
- [[#org-mode][ORG MODE]]
  - [[#directory][directory]]
  - [[#auto-tangle][auto tangle]]
  - [[#capture][capture]]
  - [[#done][done]]
  - [[#org-habits][org habits]]
  - [[#org-notifications][org notifications]]
  - [[#org-roam][org roam]]
  - [[#org-sticky-header][org sticky header]]
- [[#rainbow-mode][Rainbow mode]]
- [[#spell-fu][Spell-fu]]
- [[#todays-date][Today's date]]
- [[#theme][Theme]]
- [[#visual-fill-column][Visual fill column]]
- [[#other][Other]]

* All the icons

#+begin_src emacs-lisp

(use-package all-the-icons
  :if (display-graphic-p))

#+end_src

** All the icons - ivy

#+begin_src emacs-lisp

(setq all-the-icons-ivy-rich-icon t)
(setq all-the-icons-ivy-rich-color-icon t)
(setq all-the-icons-ivy-rich-icon-size 1.0)
(setq all-the-icons-ivy-rich-project t)
(setq all-the-icons-ivy-rich-field-width 80)
(setq inhibit-compacting-font-caches t)

#+end_src

** Ivy Rich

#+begin_src emacs-lisp

(all-the-icons-ivy-rich-mode 1)
(setq all-the-icons-ivy-rich-icon t)
(setq all-the-icons-ivy-rich-color-icon t)
(setq all-the-icons-ivy-rich-project t)

#+end_src

* Calendar

#+BEGIN_SRC emacs-lisp

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-file-source "scheduled" "~/Dokumenty/org/org-roam/20220726170250-scheduled.org" "Green")
    (cfw:org-create-file-source "archive" "~/Dokumenty/org/org-roam/20220726170420-archive.org" "Cyan")
    (cfw:org-create-file-source "important" "~/Dokumenty/org/org-roam/20220515174922-important_dates.org" "Blue")
    ;; (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
   )))

#+END_SRC

* Counsel

#+begin_src emacs-lisp

 (use-package counsel
   :bind (("C-M-j" . 'counsel-switch-buffer)
          :map minibuffer-local-map
          ("C-r" . 'counsel-minibuffer-history))
   :custom
   (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
   :config
   (counsel-mode 1))
(global-set-key (kbd "C-c k") 'counsel-rg)

#+end_src

* Dimmer

#+begin_src emacs-lisp

(require 'dimmer)
(dimmer-configure-which-key)
(dimmer-configure-helm)
(dimmer-mode t)

#+end_src

* Dired

#+begin_src emacs-lisp

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
(setq dired-open-extensions '(("gif" . "nsxiv")
                              ("jpg" . "nsxiv")
                              ("png" . "nsxiv")
                              ("pdf" . "zathura")
                              ("flac" . "mpv")
                              ("avi" . "mpv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Elfeed

#+BEGIN_SRC emacs-lisp

(require 'elfeed-goodies)
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)
;; (add-hook 'elfeed-show-mode-hook 'visual-line-mode)
(defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))
(setq elfeed-feeds (quote
                    (
                     ;; Android
                     ("https://www.androidpolice.com/feed/" android)
                     ("https://www.androidauthority.com/feed" android)
                     ;; Bezpieczeństwo
                     ("http://feeds.feedburner.com/niebezpiecznik/" bezpieczeństwo)
                     ("https://torrentfreak.com/feed/" bezpieczeństwo)
                     ("https://zaufanatrzeciastrona.pl/feed/" bezpieczeństwo)
                     ;; Drzewa
                     ("https://hyperreal.info/rss.xml" drzewa)
                     ;; Ekologia
                     ("https://climateandeconomy.com/feed/" ekologia)
                     ("https://insideclimatenews.org/feed/" ekologia)
                     ("https://jembendell.com/feed" ekologia)
                     ("https://smoglab.pl/feed/" ekologia)
                     ;; Emacs
                     ("https://planet.emacslife.com/atom.xml" emacs)
                     ("http://pragmaticemacs.com/feed/" emacs)
                     ("https://sachachua.com/blog/category/emacs-news/feed" emacs)
                     ("https://protesilaos.com/codelog.xml" emacs)
                     ("https://blog.tecosaur.com/tmio/rss.xml" emacs)
                     ;; Ereader
                     ("http://feeds.the-ebook-reader.com/feedburner/cmWU" ereader)
                     ("http://goodereader.com/blog/feed/" ereader)
                     ("http://rss.swiatczytnikow.pl/SwiatCzytnikow" ereader)
                     ("https://lithub.com/feed/" ereader)
                     ("https://ebookfriendly.com/feed/" ereader)
                     ;; Gaming
                     ("blog.bioware.com/feed/" gaming)
                     ("https://www.gamingonlinux.com/article_rss.php" gaming)
                     ("http://www.pcgamer.com/feed" gaming)
                     ("http://www.eurogamer.net/?format=rss" gaming)
                     ;; Komiksy
                     ("https://existentialcomics.com/rss.xml" komiksy)
                     ("https://xkcd.com/atom.xml" komiksy)
                     ;; LGBT
                     ("https://www.autostraddle.com/feed" lgbt)
                     ("https://www.afterellen.com/feed" lgbt)
                     ("https://lesbrary.com/feed" lgbt)
                     ("http://queer.pl/rss/" lgbt)
                     ("https://replika-online.pl/feed/" lgbt)
                     ;; Linux
                     ("https://9to5linux.com/feed/atom" linux)
                     ("https://www.cyberciti.biz/feed/" linux)
                     ("http://www.linuxjournal.com/node/feed" linux)
                     ("https://artixlinux.org/feed.php" linux)
                     ("https://distrowatch.com/news/dw.xml" linux)
                     ("http://feeds.feedburner.com/linuxpl-news" linux)
                     ("https://www.linuxjournal.com/node/feed" linux)
                     ("https://linuxman.co/feed/" linux)
                     ("https://lwn.net/headlines/newrss" linux)
                     ("https://omgubuntu.co.uk/feed" linux)
                     ("https://sysdfree.wordpress.com/feed" linux)
                     ("https://unixsheikh.com/feed.rss" linux)
                     ("https://www.phoronix.com/rss.php" linux)
                     ;; Newsy
                     ("https://allthatsinteresting.com/tag/news/feed" newsy)
                     ("https://thegrayzone.com/feed/" newsy)
                     ("https://multipolarista.com/feed/" newsy)
                     ;; Nauka
                     ("https://wielkahistoria.pl/feed/" nauka)
                     ("https://mitologiawspolczesna.pl/feed/" nauka)
                     ("https://www.crazynauka.pl/feed/" nauka)
                     ;; Open source
                     ("https://fossforce.com/feed/" opensource)
                     ("https://static.fsf.org/fsforg/rss/news.xml" opensource)
                     ("https://www.eff.org/rss/updates.xml" opensource)
                     ("https://feeds.feedburner.com/ItsFoss" opensource)
                     ("https://opensource.com/rss.xml" opensource)
                     ;; Płeć
                     ("http://codziennikfeministyczny.pl/feed/" płeć)
                     ("https://www.feministcurrent.com/feed/" płeć)
                     ;; Psychatria
                     ("https://antipsychiatry.net/" psychatria)
                     ("http://www.antipsychiatry.org/" psychatria)
                     ("https://www.psypost.org/feed" psychatria/psychologia)
                     ;; Rozrywka
                     ("https://bloody-disgusting.com/feed/" rozrywka)
                     ;; Róźne
                     ("http://chilledmagazine.com/feed" różne)
                     ("https://www.inkedmag.com/.rss/full/" różne)
                     ("https://node2.feed43.com/anomalist.xml" różne)
                     ("https://feeds.feedburner.com/EurotransportMagazine" różne)
                     ("https://www.thecatniptimes.com/feed/" różne)
                     ("https://www.premierguitar.com/feeds/feed.rss" różne)
                     ("https://www.racjonalista.pl/rss.php" różne)
                     ;; Samochody
                     ("http://www.autoblog.com/rss.xml" auta)
                     ;; Socjalizm
                     ("https://instytut-marksa.org/feed/" socjalizm)
                     ("https://marxistsociology.org/feed/" socjalizm)
                     ("https://odrodzenie.fr/feed/" socjalizm)
                     ("https://postep.org.pl/feed" socjalizm)
                     ("http://strajk.eu/feed/" socjalizm)
                     ("https://strajk.eu/temat/wiadomosci/feed/" socjalizm)
                     ("https://strajk.eu/temat/komentarz-dnia/feed/" socjalizm)
                     ("https://strajk.eu/temat/publicystyka/feed/" socjalizm)
                     ("https://krytykapolityczna.pl/feed/" socjalizm)
                     ("https://www.fightbacknews.org/feed" socjalizm)
                     ("https://www.redspark.nu/en/feed/" socjalizm)
                     ("https://www.workers.org/feed/" socjalizm)
                     ("https://www.socialistworld.net/feed/" socjalizm)
                     ("https://www.liberationnews.org/feed/" socjalizm)
                     ("https://tribuneofthepeoplenews.wordpress.com/feed/" socjalizm)
                     ("https://mronline.org/feed/" socjalizm)
                     ("https://www.peoplesworld.org/feed/" socjalizm)
                     ("https://theredphoenixapl.org/feed/" socjalizm)
                     ("http://www.popularresistance.org/feed/" socjalizm)
                     ("https://www.project-syndicate.org/RSS" socjalizm)
                     ;; Socjologia
                     ("https://feeds.feedburner.com/EverydaySociologyBlog" socjologia)
                     ("http://www.sociologylens.net/feed" socjologia)
                     ;; Sport
                     ("https://pilkarskamafia.blogspot.com/feeds/posts/default" sport)
                     ("https://rss2.feedspot.com/https://www.fourfourtwo.com/news" sport)
                     ;; Tech
                     ("https://antyweb.pl/feed" tech)
                     ("https://kernal.eu/feed" tech)
                     ("https://hnrss.org/frontpage" tech)
                     ("https://sadgrl.online/feed.xml" tech)
                     ("https://stare.pro/" tech)
                     ("https://rss2.feedspot.com/https://www.bloomberg.com/technology" tech)
                     ("https://techcrunch.com/feed/" tech)
                     ("https://www.wired.com/feed/rss" tech)
                     ("https://feeds.arstechnica.com/arstechnica/index" tech)
                     ;; Teorie spiskowe
                     ("https://consensus911.org/" teorie spiskowe)
                     ;; Zegarki
                     ("https://www.g-central.com/feed/" zegarki)
                     )))

#+END_SRC

* Expand region

#+BEGIN_SRC emacs-lisp

(use-package expand-region
  :bind ("C-=" . er/expand-region))

#+END_SRC

* Fonts

#+BEGIN_SRC emacs-lisp

(setq doom-font (font-spec :family "MesloLGS Nerd Font " :size 12)
      doom-variable-pitch-font (font-spec :family "Atkinson Hyperlegible" :size 13)
      doom-big-font (font-spec :family "MesloLGS Nerd Font " :size 20))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         ("C-S-o" . counsel-rhythmbox)
         ("C-{" . counsel-rhythmbox-playpause-current-song)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+END_SRC

** Ivy Rich

#+begin_src emacs-lisp

 (use-package ivy-rich
   :after ivy
   :init
   (ivy-rich-mode 1))
 (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
 (setq ivy-rich-path-style 'abbrev)

#+end_src

** Ivy Postframe

#+begin_src emacs-lisp

(require 'ivy-posframe)
;; display at `ivy-posframe-style'
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
(ivy-posframe-mode 1)

#+end_src

* Ledger

#+begin_src emacs-lisp

(use-package ledger-mode
  :mode ("\\.dat\\'"
         "\\.ledger\\'")
  :custom (ledger-clear-whole-transactions t))

#+end_src

* Maximize buffer

#+BEGIN_SRC emacs-lisp

(defun toggle-maximize-buffer () "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
      (jump-to-register '_)
    (progn
      (window-configuration-to-register '_)
      (delete-other-windows))))
(global-set-key [(super control return)] 'toggle-maximize-buffer)

#+END_SRC

* MU4E

#+BEGIN_SRC emacs-lisp

(use-package mu4e
  ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  :load-path "/usr/share/emacs/site-lisp/mu4e"
  :ensure t
  :defer 10
  :config

  (setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a")
  (setq mu4e-root-maildir (expand-file-name "~/Dokumenty/Maildir"))

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Updates
  (setq mu4e-update-interval 120)
  (setq mu4e-headers-auto-update t)

  ;; Configure the function to use for sending mail
  (setq message-send-mail-function 'smtpmail-send-it)

  ;; Only ask if a context hasn't been previously picked
  (setq mu4e-compose-context-policy 'ask-if-none)

  ;; Make sure plain text mails flow correctly for recipients
  (setq mu4e-compose-format-flowed t)

  ;; enable inline images
  ;; (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  ;; (when (fboundp 'imagemagick-register-types)
    ;; (imagemagick-register-types))

  ;; Use Ivy for mu4e completions (maildir folders, etc)
  (setq mu4e-completing-read-function #'ivy-completing-read)

  ;; setup some handy shortcuts
  (setq mu4e-maildir-shortcuts
        '(("/gmail/Sent"         . ?g)
          ("/outlook/Sent Items" . ?o)))

  ;; (add-to-list 'mu4e-bookmarks
          ;; (make-mu4e-bookmark
           ;; :name "All Inboxes"
           ;; :query "maildir:/gmail/Inbox OR maildir:/outlook/Inbox"
           ;; :key ?a))

  ;; Accounts
  (setq mu4e-contexts
        (list
       ;; Private account
       (make-mu4e-context
        :name "gmail" ;; for gmail
        :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "*****.***@gmail.com")
                (user-full-name    . "***** ***")
                (smtpmail-smtp-server  . "smtp.gmail.com")
                (smtpmail-smtp-service . 465)
                (smtpmail-stream-type  . ssl)
                (mu4e-drafts-folder  . "/gmail/Drafts")
                (mu4e-sent-folder  . "/gmail/Sent")
                (mu4e-refile-folder  . "/gmail/Inbox")
                (mu4e-trash-folder  . "/gmail/Trash")))

       ;; Shopping account
       (make-mu4e-context
        :name "outlook" ;; for outlook
        :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/outlook" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "*****.***@outlook.com")
                (user-full-name    . "***** ***")
                (smtpmail-smtp-server  . "smtp-mail.outlook.com")
                (smtpmail-smtp-service . 587)
                (smtpmail-stream-type  . ssl)
                (mu4e-drafts-folder  . "/outlook/Drafts")
                (mu4e-sent-folder  . "/outlook/Sent Items")
                (mu4e-refile-folder  . "/outlook/Inbox")
                (mu4e-trash-folder  . "/outlook/Deleted Items"))))))

#+END_SRC

** mu4e alert

#+begin_src emacs-lisp

(mu4e-alert-set-default-style 'libnotify)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)

#+end_src

* mpd

#+begin_src emacs-lisp

(defun move-mpc-down ()
  (interactive)
  (evil-next-visual-line)
  (mpc-select)
 )
(defun move-mpc-up ()
  (interactive)
  (evil-previous-visual-line)
  (mpc-select)
 )

(general-define-key
 :keymaps 'mpc-mode-map
 :states 'normal
 "j" 'move-mpc-down
 "k" 'move-mpc-up
 "t" 'mpc-toggle-play
 "r" 'mpc-toggle-repeat
 "s" 'mpc-toggle-shuffle
 "S" 'mpc-toggle-shuffle
 "c" 'mpc-toggle-consume
 "a" 'mpc-playlist-add
 "p" 'mpc-playlist
 ">" 'mpc-next
 "<" 'mpc-prev
 "R" 'mpc-playlist-delete
 "RET" 'mpc-select
 "x" 'mpc-play-at-point
 )

#+end_src

* ORG MODE

** directory

#+BEGIN_SRC emacs-lisp

(after! org
  (setq org-directory "~/Dokumenty/org/"
        org-log-done 'time
        org-agenda-include-all-todo t
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))) ; Task has been cancelled
  (setq org-agenda-files
        '("~/Dokumenty/org/org-roam/20220726170250-scheduled.org"
          "~/Dokumenty/org/org-roam/20220726170420-archive.org"
          "~/Dokumenty/org/org-roam/20220726155331-todo.org"
          "~/Dokumenty/org/org-roam/20220515174922-important_dates.org"))
  (let ((org-super-agenda-groups
       '((:auto-category t))))
        (org-agenda-list))

#+END_SRC

** auto tangle

#+begin_src emacs-lisp

(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))

#+end_src

** capture

#+begin_src emacs-lisp

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dokumenty/org/org-roam/20220914141051-todo.org" "TODOs")
         "* TODO %?\n  %i\n  %a")
        ("s" "Scratchpad" entry (file+datetree "~/Dokumenty/org/org-roam/20220914141105-scratchpad.org")
         "* %?\nEntered on %U\n  %i\n  %a")))

#+end_src

** done

#+BEGIN_SRC emacs-lisp

(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'tree))

#+END_SRC

** org habits

#+begin_src emacs-lisp

(setq org-modules '(org-habit
                    org-habit-plus))
(require 'org-habit)

#+end_src

** org notifications

#+BEGIN_SRC emacs-lisp

(org-notifications-start)

#+END_SRC

** org roam

#+BEGIN_SRC emacs-lisp

;; (use-package org-roam
  ;; :ensure t
  ;; :init
  ;; (setq org-roam-v2-ack t)
  ;; :custom
  ;; (org-roam-directory "~/Dokumenty/org/org-roam")
  ;; (setq org-roam-dailies-directory "~/Dokumenty/org/org-roam/daily")
  ;; (custom-set-faces
    ;; '((org-roam-link org-roam-link-current)
     ;; :foreground "#e24888" :underline t))
  ;; (org-roam-completion-everywhere t)
  ;; :bind
  ;; (("C-c n l" . org-roam-buffer-toggle)
   ;; ("C-c n f" . org-roam-node-find)
   ;; ("C-c n i" . org-roam-node-insert)
   ;; :map org-mode-map
   ;; ("C-M-i" . completion-at-point)
   ;; :map org-roam-dailies-map
   ;; ("Y" . org-roam-dailies-capture-yesterday)
   ;; ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c n d" . org-roam-dailies-map)
  ;; :config
  ;; (require 'org-roam-dailies) ;; Ensure the keymap is available
  ;; (org-roam-db-autosync-mode)
  ;; (org-roam-setup))

#+END_SRC

** org sticky header

#+begin_src emacs-lisp

(require 'org-sticky-header)

#+end_src

* Rainbow mode

#+begin_src emacs-lisp

(require 'rainbow-mode)
(setq rainbow-mode t)

#+end_src

* Spell-fu

#+begin_src emacs-lisp

(use-package spell-fu)
(global-spell-fu-mode)
(add-hook 'spell-fu-mode-hook
  (lambda ()
    (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "pl"))
    (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "en"))
    (spell-fu-dictionary-add
      (spell-fu-get-personal-dictionary "pl-personal" "~/.config/enchant/pl_PL.dic"))
    (spell-fu-dictionary-add
      (spell-fu-get-personal-dictionary "en-personal" "~/.config/enchant/en.dic"))))

#+end_src

* Today's date

#+begin_src emacs-lisp

(defun insert-todays-date (arg)
  (interactive "U")
  (insert (if arg
          (format-time-string "%d-%m-%Y")
          (format-time-string "%Y-%m-%d"))))


#+end_src

* Theme

#+BEGIN_SRC emacs-lisp

;; (setq doom-theme 'doom-catppuccin)
;; (setq doom-theme 'doom-dracula)
;; (setq doom-theme 'everforest-hard-dark)
(setq doom-theme 'doom-gruvbox)
;; (setq doom-theme 'doom-nord)
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-solarized-dark)
;; (setq doom-theme 'doom-tokyo-night)

#+END_SRC

* Visual fill column

#+begin_src emacs-lisp

(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
(defun td/visual-fill-setup ()
  (setq-local visual-fill-column-width 150
              visual-fill-column-center-text nil)
  (visual-fill-column-mode 1))

#+end_src

* Other

#+BEGIN_SRC emacs-lisp

(setq frame-resize-pixelwise t)
(setq display-line-numbers-type t)
(setq org-hide-emphasis-markers t)
(setq auth-sources '("~/Dokumenty/tajne/.authinfo.gpg"))
(setq org-startup-with-inline-images t)
(setq conf-unix-mode t)
(global-set-key (kbd "C-x w") 'delete-frame)

;; Beacon mode
(beacon-mode 1)

;; Browser
;; (setq browse-url-browser-function 'eww-browse-url)

;; Nov mode
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; Modeline
(setq doom-modeline-buffer-name t)

;; Pocket
(require 'pocket-reader)

;; Shell
(setq shell-file-name "/usr/bin/fish")

#+END_SRC
