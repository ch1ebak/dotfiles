* calendar
#+begin_src emacs-lisp
(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-file-source "scheduled" "~/Dokumenty/emacs-docs/org/org-roam/20220726170250-scheduled.org" "Green")
    (cfw:org-create-file-source "archive" "~/Dokumenty/emacs-docs/org/org-roam/20220726170420-archive.org" "Cyan")
    (cfw:org-create-file-source "important" "~/Dokumenty/emacs-docs/org/org-roam/20220515174922-important_dates.org" "Blue")
    ;; (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
   )))
#+end_src

* dashboard
#+begin_src emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
(setq dashboard-startup-banner "~/.doom.d/themes/splash/doom.png")
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
(setq doom-fallback-buffer-name "*dashboard*")
(setq dashboard-banner-logo-title "welcome to the one true text editor")
(setq dashboard-center-content t)
(setq dashboard-show-shortcuts t)
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 15)
                        (projects . 5)
                        ;; (agenda . 5)
                        ))
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-set-navigator t)
(setq dashboard-set-init-info t)
(setq dashboard-set-footer t)
(setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)

;; (add-to-list 'dashboard-items '(agenda) t)
;; (setq dashboard-week-agenda t)
;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
#+end_src

* dimmer
#+begin_src emacs-lisp
(require 'dimmer)
(dimmer-configure-which-key)
(dimmer-configure-helm)
(dimmer-mode t)
#+end_src

* emms
#+begin_src emacs-lisp
(setq emms-source-file-default-directory "~/Muzyka/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(map! :leader
      (:prefix ("a" . "EMMS audio player")
       :desc "Go to emms playlist" "a" #'emms-playlist-mode-go
       :desc "Emms pause track" "x" #'emms-pause
       :desc "Emms stop track" "s" #'emms-stop
       :desc "Emms play previous track" "p" #'emms-previous
       :desc "Emms play next track" "n" #'emms-next))
#+end_src

* markdown
#+begin_src emacs-lisp
(setq markdown-hide-urls t)
;; (setq markdown-hide-markup t)

(setq markdown-asymmetric-header t)
;; (setq markdown-header-scaling t)
(defun dw/set-markdown-header-font-sizes ()
  (dolist (face '((markdown-header-face-1 . 1.2)
                  (markdown-header-face-2 . 1.1)
                  (markdown-header-face-3 . 1.0)
                  (markdown-header-face-4 . 1.0)
                  (markdown-header-face-5 . 1.0)))
    (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

(defun dw/markdown-mode-hook ()
  (dw/set-markdown-header-font-sizes))

(add-hook 'markdown-mode-hook 'dw/markdown-mode-hook)
#+end_src

* org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  (org-bullets-bullet-list '("" "" "" "" "" "")))
#+end_src

* org roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Dokumenty/org/org-roam")
  (custom-set-faces
    '((org-roam-link org-roam-link-current)
     :foreground "#e24888" :underline t))
  (org-roam-completion-everywhere t)
  (org-roam-dailies-directory "daily/")
  (org-roam-dailies-capture-templates
    '(("d" "default" entry
     ;; "* %<%H:%M %p> %?"
     "* %<%h:%m>"
     :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
     :unnarrowed t)))
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   :map org-mode-map
   ("C-M-i" . completion-at-point)
   :map org-roam-dailies-map
   ("Y" . org-roam-dailies-capture-yesterday)
   ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode)
  (org-roam-setup))
#+end_src

* twittering mode
#+begin_src emacs-lisp
(setq twittering-use-master-password t)
(setq twittering-private-info-file "~/.doom.d/twitter/.twittering-mode.gpg")
(setq twittering-cert-file "/etc/ssl/certs/ca-bundle.crt")
(setq twittering-allow-insecure-server-cert t)
(setq twittering-icon-mode t)
(setq twittering-use-icon-storage t)
(setq twittering-icon-storage-file "~/.doom.d/twitter/.twittering-mode-icons.gz")
(setq twittering-display-remaining t)
(defalias 'epa--decode-coding-string 'decode-coding-string)
#+end_src

* wallabag
#+begin_src emacs-lisp
(use-package wallabag
  :defer t
  :config
  (setq wallabag-host "https://app.wallabag.it")
  (setq wallabag-username "***** ***")
  (setq wallabag-password "***** ***")
  (setq wallabag-clientid "***** ***")
  (setq wallabag-secret "***** ***")
  (add-hook 'wallabag-after-render-hook 'wallabag-search-update-and-clear-filter)
  )
#+end_src
